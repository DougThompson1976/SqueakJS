Object subclass: #JS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'JSBridge-Core'!!JS commentStamp: 'bf 11/20/2014 12:00' prior: 0!Instances of this class are proxies for JavaScript objects. This class itself is a proxy for the global JavaScript scope. Sending messages looks up named properties, and calls them if they are functions. Arguments are converted from Squeak to JavaScript objects for nil, Booleans, Integers, Floats, Strings, and Arrays. The result is converted back for numbers and null/true/false, otherwise wrapped as JS instance proxy. In addition, sending #new/#new:... creates an instance of that object."Call global function"JS alert: 'Squeak says Hello World!!'."Call function on global object"JS console log: 'Squeak says Hello World!!'."Modify DOM"((JS document getElementsByTagName: 'h1') at: 0)	at: 'innerHTML' put: 'Squeak said Hello World at ', Time now asString."Create new Object, add and retrieve property"| obj |obj := JS Object new.obj at: #someProp put: 42.obj someProp"Create a function and call it"| func |func := JS Function new: 'arg0' and: 'arg1' body: 'return arg0 + arg1'.func call: nil with: 3 and: 4."Create an object with a property and a method and call it"| obj |obj := JS Object new.obj at: #myProp put: 6.obj at: #myMethod put: (JS Function new: 'return this.myProp * 7').obj myMethod"Inspect all properties in global navigator object"| object propNames propValues |object := JS navigator.propNames := JS Object keys: object.propValues := (0 to: propNames length - 1) collect: [:i |	(propNames at: i) -> (object at: (propNames at: i))].(propValues as: Dictionary) inspect!!JS methodsFor: 'accessing' stamp: 'bf 11/20/2014 00:38'!at: aString	"get a property"	<primitive: 117>	#(JavaScriptPlugin primitiveAt 0 0).	^ self primitiveFailed!at: aString put: anObject	"set a property"	<primitive: 117>	#(JavaScriptPlugin primitiveAtPut 0 0).	^ self primitiveFailed!doesNotUnderstand: aMessage	"Create an instance of self, call a function, or get/set an existing property"	<primitive: 117>	#(JavaScriptPlugin primitiveDoUnderstand 0 0).	^ self primitiveFailed!printOn: aStream	aStream nextPutAll: self printString!printString	"Convert me to a string"	<primitive: 117>	#(JavaScriptPlugin primitiveAsString 0 0).	^ self primitiveFailed!typeof	"Answer my jsObject's type (a string)"	<primitive: 117>	#(JavaScriptPlugin primitiveTypeof 0 0).	^ self primitiveFailed! !!JS class methodsFor: 'instance creation' stamp: 'bf 11/20/2014 00:38'!basicNew	self error: 'Use "JS Object new" to create a new JavaScript object'.!doesNotUnderstand: aMessage	"Call a global function, or get a global object"	<primitive: 117>	#(JavaScriptPlugin primitiveDoUnderstand 0 0).	^ self primitiveFailed!at: aString	"get a global"	<primitive: 117>	#(JavaScriptPlugin primitiveAt 0 0).	^ self primitiveFailed!at: aString put: anObject	"set a global"	<primitive: 117>	#(JavaScriptPlugin primitiveAtPut 0 0).	^ self primitiveFailed! !!JS class methodsFor: 'class initialization' stamp: 'bf 11/21/2014 17:00'!initialize	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self jsWorkspaceOpen]		ifFalse: [[self jsWorkspaceOpen] fork].!jsWorkspaceOpen	Workspace new		contents: self jsWorkspaceContents;		openLabel: 'JSBridge'.!jsWorkspaceContents
	"Create symbols in advance"	#(alert: console log: document getElementsByTagName: new:and:body: call:with:and: navigator Object keys: Function length).	^ 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:"Call global function"JS alert: ''Squeak says Hello World!!''."Call function on global object (open developer tools to see output)"JS console log: ''Squeak says Hello World!!''."Modify DOM"((JS document getElementsByTagName: ''h1'') at: 0)	at: ''innerHTML'' put: ''Squeak said Hello World at '', Time now asString."Create new Object, add and retrieve property"| obj |obj := JS Object new.obj at: #someProp put: 42.obj someProp"Create a function and call it"| func |func := JS Function new: ''arg0'' and: ''arg1'' body: ''return arg0 + arg1''.func call: nil with: 3 and: 4."Create an object with a property and a method and call it"| obj |obj := JS Object new.obj at: #myProp put: 6.obj at: #myMethod put: (JS Function new: ''return this.myProp * 7'').obj myMethod"Inspect all properties in global navigator object"| object propNames propValues |object := JS navigator.propNames := JS Object keys: object.propValues := (0 to: propNames length - 1) collect: [:i |	(propNames at: i) -> (object at: (propNames at: i))].(propValues as: Dictionary) inspect'! !JS initialize!