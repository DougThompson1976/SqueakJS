Object subclass: #JSObjectProxy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'JSBridge-Core'!!JSObjectProxy commentStamp: 'bf 11/20/2014 12:00' prior: 0!A JSObjectProxy is a proxy for JavaScript objects. It intercepts messages to look up named properties, and call them if they are functions. Arguments are converted from Squeak to JavaScript objects for nil, Booleans, SmallIntegers, Floats, Strings, and Arrays. The result is converted back to Squeak objects for numbers and null/true/false, otherwise wrapped in a new JSObjectProxy. To add new properties, or access existing properties without calling them (if they are functions), use at:/at:put:. In addition, sending #new/#new:... creates an instance of that object, and #typeof returns the type as a string. There is a global proxy named JS to allow accessing global JavasScript objects."Call global function"JS alert: 'Squeak says Hello World!!'."Call function on global object"JS console log: 'Squeak says Hello World!!'."Modify DOM"((JS document getElementsByTagName: 'h1') at: 0)	at: 'innerHTML' put: 'Squeak said Hello World at ', Time now asString."Create new Object, add and retrieve property"| obj |obj := JS Object new.obj at: #someProp put: 42.obj someProp"Create a function and call it"| func |func := JS Function new: 'arg0' and: 'arg1' body: 'return arg0 + arg1'.func call: nil with: 3 and: 4."Create an object with a property and a method and call it"| obj |obj := JS Object new.obj at: #myProp put: 6.obj at: #myMethod put: (JS Function new: 'return this.myProp * 7').obj myMethod"Inspect all properties in global navigator object"| object propNames propValues |object := JS navigator.propNames := JS Object keys: object.propValues := (0 to: propNames length - 1) collect: [:i |	(propNames at: i) -> (object at: (propNames at: i))].(propValues as: Dictionary) inspect!!JSObjectProxy methodsFor: 'accessing' stamp: 'bf 11/20/2014 00:38'!at: aString	"get a property"	<primitive: 117> #(JavaScriptPlugin primitiveAt 0 0) at: 1.	^ self primitiveFailed!at: aString put: anObject	"set a property"	<primitive: 117> #(JavaScriptPlugin primitiveAtPut 0 0) at: 1.	^ self primitiveFailed!doesNotUnderstand: aMessage	"Create an instance of self, call a function, or get/set an existing property"	<primitive: 117> #(JavaScriptPlugin primitiveDoUnderstand 0 0) at: 1.	^ self primitiveFailed!printOn: aStream	[aStream nextPutAll: self asString]		ifError: [:err :rcvr | ^ super printOn: aStream].!asString	"Convert me to a string"	<primitive: 117> #(JavaScriptPlugin primitiveAsString 0 0) at: 1.	^ self primitiveFailed!typeof	"Answer my jsObject's type (a string)"	<primitive: 117> #(JavaScriptPlugin primitiveTypeof 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'instance creation' stamp: 'bf 11/20/2014 00:38'!new	self error: 'Use "JS Object new" to create a new JavaScript object'.! !!JSObjectProxy class methodsFor: 'class initialization' stamp: 'bf 11/21/2014 17:00'!initialize	"Create the JS global"	Smalltalk at: #JS put: self basicNew.	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self openExamples]		ifFalse: [[self openExamples] fork].!openExamples	Workspace new		contents: 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:', self examples;		openLabel: 'JSBridge'.!examples	| comment |	"Create symbols in advance"	('alert: console log: document getElementsByTagName: new:and:body: call:with:and: navigator Object keys: Function length'		findTokens: ' ') do: [:s | s asSymbol].	comment := self organization classComment asString.	^ comment copyFrom: (comment indexOf: $") to: comment size.! !JSObjectProxy initialize!